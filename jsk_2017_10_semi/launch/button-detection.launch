<launch>
  <node name="image_siftnode_button" pkg="imagesift" type="imagesift"
  	output="screen" >
	<remap from="image" to="narrow_stereo/left/image_rect_color" />
        <remap from="camera_info" to="narrow_stereo/left/camera_info" />
  </node>

  <node name="point_pose_extractor_button" pkg="jsk_perception"
  	type="point_pose_extractor" clear_params="true">
	<!-- <param name="child_frame_name" value="button"/> -->
	<param name="template_filename" value="$(find jsk_2017_10_semi)/data/button.png"/>
	<param name="object_width" value="0.597" />
	<param name="object_height" value="0.285" />
	<param name="reprojection_threshold" value="10" />  <!-- TODO 10 3.0 -->
	<param name="distanceratio_threshold" value="0.6" /> <!-- TODO 0.6 0.49 -->
	<param name="relative_pose" value="0 0 0 0 0 0 1" />    <!-- TODO quaternion expression -->
	<!-- <param name="relative_pose" value="0 0 0 0 0 0" / --> <!-- you can also use rpy expression. -->
	<param name="error_threshold" value="30.0" />
	<param name="window_name" value="button" />
	<!-- <param name="viewer_window" value="false" />  -->
  </node>

  <sphinxdoc><![CDATA[
  This script starts sift base object pose detection node.
  defualt template image is `opencv logo <http://www.google.com/search?client=ubuntu&channel=fs&q=opencv&oe=utf-8&um=1&ie=UTF-8&tbm=isch&source=og&sa=N&hl=ja&tab=wi&biw=937&bih=638>`_.
  .. code-block:: bash
    rosrun roseus_tutorial point-pose-extraction.l
    to read the result data from euslisp program.
    you need to launch image-view.launch before using this sample.
      ]]></sphinxdoc>

</launch>